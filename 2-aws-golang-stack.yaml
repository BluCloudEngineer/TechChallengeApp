AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - "AWS::SecretsManager-2020-07-23"

Description: "Deploy Servian Tech Challenge App to AWS - Part 2 of 2"


Parameters:
  ProjectName:
    Default: "Servian Tech Challenge App"
    Description: "The name of the AWS project"
    Type: "String"
  
  RdsBackupRetentionDays:
    ConstraintDescription: "Must be a positive integer value that is greater than or zero to zero or less than or equal to 35"
    Default: 7
    Description: "Total number of days to retain RDS backups"
    MaxValue: 35
    MinValue: 0
    Type: "Number"
  
  RdsInstanceClassType:
    AllowedValues:
      - "db.r5.large"
      - "db.r5.xlarge"
      - "db.r5.2xlarge"
    ConstraintDescription: "Must be one of the allowed values"
    Default: "db.r5.large"
    Description: "The instance class for the RDS database"
    Type: "String"
  
  RdsDefaultDatabaseName:
    Default: "app"
    Description: "The name given for the default database"
    Type: "String"
  
  RdsDatabaseEngineVersion:
    AllowedValues:
      - "9.6.3"
      - "9.6.6"
      - "9.6.8"
      - "9.6.9"
      - "9.6.11"
      - "9.6.12"
      - "9.6.16"
      - "9.6.17"
      - "9.6.18"
      - "9.6.19"
      - "10.7"
    Default: "10.7"
    Description: "RDS cluster engine version to use"
    Type: "String"
  
  RdsDatabaseEngineName:
    Default: "aurora-postgresql"
    Description: "The name of the database engine to be used by the RDS database instance"
    Type: "String"
  
  RdsSecretRotationLogGroupRetention:
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
    Default: 30 # Days
    Description: "Total number of days to retain Amazon CloudWatch logs"
    Type: "Number"
  
  DesiredTasksCount:
    ConstraintDescription: "Must be a positive integer value that is greater than or equal to one and less than or equal to ten"
    Default: 3
    Description: "The total number of tasks to run on the service"
    MaxValue: 10
    MinValue: 1
    Type: "Number"
  
  ElbHealthCheckInterval:
    ConstraintDescription: "Must be a positive integer value that is greater than or equal to 10 and less than or equal to 30"
    Default: 10 # Seconds
    Description: "The total amount of time in seconds to get the health of an instance associated with the Application Load Balancer"
    MaxValue: 30
    MinValue: 10
    Type: "Number"

  ElbHealthCheckCount:
    ConstraintDescription: "Must be a positive integer value that is greater than or equal to 2 and less than or equal to 10"
    Default: 3
    Description: "Total number of successful health checks to deem an instance healthy"
    MaxValue: 10
    MinValue: 2
    Type: "Number"


Resources:
  # --- Start new VPC, public / private subnets, route tables and Internet Gateway ---
    TechChallengeVpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: "10.0.0.0/16"
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge VPC"
          - Key: "Project"
            Value: !Ref ProjectName
    
    PublicInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge Internet Gateway"
          - Key: "Project"
            Value: !Ref ProjectName
    
    PublicInternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref PublicInternetGateway
        VpcId: !Ref TechChallengeVpc

    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2a"
        CidrBlock: "10.0.10.0/24"
        MapPublicIpOnLaunch: true
        Tags:
          - Key: "Name"
            Value: "Public Subnet 1"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Public"
        VpcId: !Ref TechChallengeVpc
    
    PublicSubnet1RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Public Route Table 1"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicSubnet1RouteTable
        SubnetId: !Ref PublicSubnet1
    
    PublicSubnet1Route:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref PublicInternetGateway
        RouteTableId: !Ref PublicSubnet1RouteTable
    
    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2b"
        CidrBlock: "10.0.20.0/24"
        MapPublicIpOnLaunch: true
        Tags:
          - Key: "Name"
            Value: "Public Subnet 2"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Public"
        VpcId: !Ref TechChallengeVpc

    PublicSubnet2RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Public Route Table 2"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicSubnet2RouteTable
        SubnetId: !Ref PublicSubnet2

    PublicSubnet2Route:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref PublicInternetGateway
        RouteTableId: !Ref PublicSubnet2RouteTable
    
    PublicSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2c"
        CidrBlock: "10.0.30.0/24"
        MapPublicIpOnLaunch: true
        Tags:
          - Key: "Name"
            Value: "Public Subnet 3"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Public"
        VpcId: !Ref TechChallengeVpc

    PublicSubnet3RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Public Route Table 3"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PublicSubnet3RouteTable
        SubnetId: !Ref PublicSubnet3

    PublicSubnet3Route:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: !Ref PublicInternetGateway
        RouteTableId: !Ref PublicSubnet3RouteTable

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2a"
        CidrBlock: "10.0.110.0/24"
        MapPublicIpOnLaunch: false
        Tags:
          - Key: "Name"
            Value: "Private Subnet 1"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Private"
        VpcId: !Ref TechChallengeVpc
 
    PrivateSubnet1RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Private Route Table 1"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateSubnet1RouteTable
        SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2b"
        CidrBlock: "10.0.120.0/24"
        MapPublicIpOnLaunch: false
        Tags:
          - Key: "Name"
            Value: "Private Subnet 2"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Private"
        VpcId: !Ref TechChallengeVpc

    PrivateSubnet2RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Private Route Table 2"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateSubnet2RouteTable
        SubnetId: !Ref PrivateSubnet2

    PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "ap-southeast-2c"
        CidrBlock: "10.0.130.0/24"
        MapPublicIpOnLaunch: false
        Tags:
          - Key: "Name"
            Value: "Private Subnet 3"
          - Key: "Project"
            Value: !Ref ProjectName
          - Key: "Subnet Type"
            Value: "Private"
        VpcId: !Ref TechChallengeVpc

    PrivateSubnet3RouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        Tags:
          - Key: "Name"
            Value: "Private Route Table 3"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc

    PrivateSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref PrivateSubnet3RouteTable
        SubnetId: !Ref PrivateSubnet3

    PrivateSecretsManagerEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        PrivateDnsEnabled: true
        SecurityGroupIds:
          - !Sub ${SecretsManagerSecurityGroup.GroupId}
        ServiceName: "com.amazonaws.ap-southeast-2.secretsmanager"
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        VpcEndpointType: "Interface"
        VpcId: !Ref TechChallengeVpc
  # --- End new VPC, public / private subnets, route tables and Internet Gateway ---

  # --- Start create RDS credentials ---
    RdsSecretCredentials:
      Type: AWS::SecretsManager::Secret
      Properties:
        Description: "Credentials and connection string data for the Servian Tech Challenge App database cluster and instances"
        GenerateSecretString:
          ExcludeCharacters: "/'\"@"
          ExcludeLowercase: false
          ExcludeNumbers: false
          ExcludePunctuation: true
          ExcludeUppercase: false
          GenerateStringKey: "password"
          IncludeSpace: false
          SecretStringTemplate: "{\"username\": \"postgres\"}"
        Name: "/Servian/TechChallengeApp/RDS"
        Tags:
            - Key: "Name"
              Value: "TechChallengeApp Secret"
            - Key: "Project"
              Value: !Ref ProjectName
    
    RdsSecretCredentialsTargetAttachment:
      Type: AWS::SecretsManager::SecretTargetAttachment
      Properties:
        SecretId: !Ref RdsSecretCredentials
        TargetId: !Ref RdsDatabaseCluster
        TargetType: "AWS::RDS::DBCluster"
  # --- End create RDS credentials ---

  # --- Start create RDS cluster and database instances ---
    RdsDatabaseCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        AvailabilityZones:
          - "ap-southeast-2a"
          - "ap-southeast-2b"
          - "ap-southeast-2c"
        BackupRetentionPeriod: !Ref RdsBackupRetentionDays
        DatabaseName: !Ref RdsDefaultDatabaseName
        DBClusterIdentifier: "Servian-TechChallengeApp-Cluster"
        DBSubnetGroupName: !Ref RdsClusterDatabaseGroup
        DeletionProtection: false # Disabled for this exercise
        EnableHttpEndpoint: false
        Engine: "aurora-postgresql"
        EngineMode: "provisioned"
        EngineVersion: !Ref RdsDatabaseEngineVersion
        MasterUsername: !Sub "{{resolve:secretsmanager:${RdsSecretCredentials}::username}}"
        MasterUserPassword: !Sub "{{resolve:secretsmanager:${RdsSecretCredentials}::password}}"
        Port: 5432
        StorageEncrypted: true
        Tags:
          - Key: "Name"
            Value: "TechChallengeApp Database"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcSecurityGroupIds:
          - !Sub ${RdsSecurityGroup.GroupId}

    RdsClusterDatabaseGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "Servian TechChallengeApp Group"
        DBSubnetGroupName: "servian-techchallengeapp-group"
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
        Tags:
          - Key: "Name"
            Value: "TechChallengeApp Database Group"
          - Key: "Project"
            Value: !Ref ProjectName
    
    RdsDatabaseClusterInstance1:
      Type: AWS::RDS::DBInstance
      Properties:
        AllowMajorVersionUpgrade: false # This is disabled to keep the database at a set version
        AutoMinorVersionUpgrade: false # This is disabled to keep the database at a set version
        DBClusterIdentifier: !Ref RdsDatabaseCluster
        DBInstanceClass: !Ref RdsInstanceClassType
        DBInstanceIdentifier: "Servian-TechChallengeApp-Database-1"
        DBSubnetGroupName: !Ref RdsClusterDatabaseGroup
        DeleteAutomatedBackups: true
        EnablePerformanceInsights: false
        Engine: !Ref RdsDatabaseEngineName
        MonitoringInterval: 0
        PubliclyAccessible: false
        StorageEncrypted: true
        Tags:
            - Key: "Name"
              Value: "TechChallengeApp Database"
            - Key: "Project"
              Value: !Ref ProjectName

    RdsDatabaseClusterInstance2:
      Type: AWS::RDS::DBInstance
      Properties:
        AllowMajorVersionUpgrade: false # This is disabled to keep the database at a set version
        AutoMinorVersionUpgrade: false # This is disabled to keep the database at a set version
        DBClusterIdentifier: !Ref RdsDatabaseCluster
        DBInstanceClass: !Ref RdsInstanceClassType
        DBInstanceIdentifier: "Servian-TechChallengeApp-Database-2"
        DBSubnetGroupName: !Ref RdsClusterDatabaseGroup
        DeleteAutomatedBackups: true
        EnablePerformanceInsights: false
        Engine: !Ref RdsDatabaseEngineName
        MonitoringInterval: 0
        PubliclyAccessible: false
        StorageEncrypted: true
        Tags:
            - Key: "Name"
              Value: "TechChallengeApp Database"
            - Key: "Project"
              Value: !Ref ProjectName
  # --- End create RDS cluster and database instances ---

  # --- Start Security Groups ---
    RdsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Access to RDS cluster"
        GroupName: "TechChallengeApp-RDS-Access"
        SecurityGroupIngress:
          - Description: "PostgreSQL RDS access"
            FromPort: 5432
            IpProtocol: "tcp"
            SourceSecurityGroupId: !Sub ${EcsSecurityGroup.GroupId}
            ToPort: 5432
        Tags:
          - Key: "Name"
            Value: "RDS Security Group"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc
    
    SecretsManagerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Access to AWS Secrets Manager"
        GroupName: "TechChallengeApp-AWS-Secrets-Manager-Access"
        SecurityGroupIngress:
          - CidrIp: "0.0.0.0/0"
            Description: "Secrets Manger access"
            FromPort: 443
            IpProtocol: "tcp"
            ToPort: 443
        Tags:
          - Key: "Name"
            Value: "AWS Secrets Manager Security Group"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc
    
    EcsSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Access to the Servian Tech Challenge App on ECS"
        GroupName: "TechChallengeApp-Amazon-ECS"
        SecurityGroupIngress:
          - Description: "Servian Tech Challenge App Container"
            FromPort: 80
            IpProtocol: "tcp"
            SourceSecurityGroupId: !Sub ${AlbSecurityGroup.GroupId}
            ToPort: 80
        Tags:
          - Key: "Name"
            Value: "Amazon ECS Security Group"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc
    
    AlbSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Access to the Application Load Balancer used by the Servian Tech Challenge App"
        GroupName: "TechChallengeApp-Amazon-ALB"
        SecurityGroupIngress:
          - CidrIp: "0.0.0.0/0"
            Description: "Servian Tech Challenge App - Internet Access"
            FromPort: 80
            IpProtocol: "tcp"
            ToPort: 80
        Tags:
          - Key: "Name"
            Value: "Amazon ALB Security Group"
          - Key: "Project"
            Value: !Ref ProjectName
        VpcId: !Ref TechChallengeVpc
  # --- End Security Groups ---

  # --- Start Amazon CloudWatch Log Group ---
    EcsTaskDefinitionLogGroup:
      DependsOn: EcsTaskDefinition
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: "/ecs/Servian-Tech-Challenge-App"
        RetentionInDays: !Ref RdsSecretRotationLogGroupRetention
  # --- End Amazon CloudWatch Log Group ---

  # --- Start Amazon ECS Cluster ---
    EcsCluster:
      Type: AWS::ECS::Cluster
      Properties:
        CapacityProviders:
          - "FARGATE"
        ClusterName: "ServianTechChallengeAppCluster"
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge App - Cluster"
          - Key: "Project"
            Value: !Ref ProjectName
  # --- End Amazon ECS Cluster ---

  # --- Start Amazon ECS Task Definition ---
    EcsTaskDefinition:
      DependsOn:
        - RdsDatabaseClusterInstance1
        - RdsDatabaseClusterInstance2
      Type: AWS::ECS::TaskDefinition
      Properties:
        ContainerDefinitions:
          - DisableNetworking: false
            Essential: true
            HealthCheck:
              Command:
                - "CMD-SHELL"
                - "curl -f http://localhost:80/healthcheck/ || exit 1"
            Image: !Sub
              - "${AWS::AccountId}.dkr.ecr.ap-southeast-2.amazonaws.com/${Repo}:latest"
              - Repo: !ImportValue EcrRepositoryName
            Interactive: false
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-group: "/ecs/Servian-Tech-Challenge-App"
                awslogs-region: "ap-southeast-2"
                awslogs-stream-prefix: "ecs"
            Name: "ServianTechChallengeAppContainer"
            PortMappings:
              - ContainerPort: 80
                HostPort: 80
                Protocol: "tcp"
            Privileged: false
            PseudoTerminal: false
        Cpu: "256"
        ExecutionRoleArn: !Sub ${EcsExecutionRole.Arn}
        Family: "Servian-Tech-Challenge-App"
        Memory: "512"
        NetworkMode: "awsvpc"
        RequiresCompatibilities:
          - "FARGATE"
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge App - Task Definition"
          - Key: "Project"
            Value: !Ref ProjectName
        TaskRoleArn: !Sub "${EcsExecutionRole.Arn}"
  # --- End Amazon ECS Task Definition ---

  # --- Start Amazon ECS Service ---
    EcsService:
      DependsOn:
        - RdsDatabaseClusterInstance1
        - RdsDatabaseClusterInstance2
      Type: AWS::ECS::Service
      Properties:
        Cluster: !Sub "${EcsCluster.Arn}"
        DeploymentConfiguration:
          DeploymentCircuitBreaker:
            Enable: true
            Rollback: true
        DeploymentController:
          Type: "ECS"
        DesiredCount: !Ref DesiredTasksCount
        EnableECSManagedTags: true
        EnableExecuteCommand: false # This functionality is not required
        HealthCheckGracePeriodSeconds: 60 # 1 minute grace period
        LaunchType: "FARGATE"
        LoadBalancers:
          - ContainerName: "ServianTechChallengeAppContainer"
            ContainerPort: 80
            TargetGroupArn: !Ref EcsApplicationLoadBalancerTargetGroup
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED # This needs to be enabled for the ECS service to run
            SecurityGroups:
              - !Ref EcsSecurityGroup
            Subnets:
              - !Ref PublicSubnet1
              - !Ref PublicSubnet2
              - !Ref PublicSubnet3
        SchedulingStrategy: "REPLICA"
        ServiceName: "Servian-Tech-Challenge-App-Service"
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge App - Service"
          - Key: "Project"
            Value: !Ref ProjectName
        TaskDefinition: !Ref EcsTaskDefinition
  # --- End Amazon ECS Service ---

  # --- Start Amazon Application Load Balancer ---
    EcsApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: "ipv4"
        Name: "Servian-Tech-Challenge-ALB"
        Scheme: "internet-facing"
        SecurityGroups:
          - !Sub ${AlbSecurityGroup.GroupId}
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge App - Application Load Balancer"
          - Key: "Project"
            Value: !Ref ProjectName
        Type: "application"

    EcsApplicationLoadBalancerTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckEnabled: true
        HealthCheckIntervalSeconds: !Ref ElbHealthCheckInterval
        HealthCheckPath: "/healthcheck/"
        HealthCheckPort: "80"
        HealthCheckProtocol: "HTTP"
        HealthyThresholdCount: !Ref ElbHealthCheckCount
        Name: "Servian-Tech-Challenge-TG"
        Port: 80
        Protocol: "HTTP"
        ProtocolVersion: "HTTP1"
        Tags:
          - Key: "Name"
            Value: "Servian Tech Challenge App - Application Load Balancer Target Group"
          - Key: "Project"
            Value: !Ref ProjectName
        TargetType: "ip"
        UnhealthyThresholdCount: !Ref ElbHealthCheckCount # This must be the same as HealthyThresholdCount
        VpcId: !Ref TechChallengeVpc
        
    EcsApplicationLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - TargetGroupArn: !Ref EcsApplicationLoadBalancerTargetGroup
            Type: "forward"
        LoadBalancerArn: !Ref EcsApplicationLoadBalancer
        Port: 80
        Protocol: "HTTP"
  # --- End Amazon Application Load Balancer ---

  # --- Start Amazon IAM Roles ---
    EcsExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - "ecs-tasks.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Description: "Servian Tech Challenge App - ECS Task Execution IAM role"
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        Path: "/"
        Policies:
          - PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "secretsmanager:GetSecretValue"
                  Resource:
                    - !Ref RdsSecretCredentials
            PolicyName: "Get-RDS-Secret-Value"
        RoleName: "Servian-Tech-Challenge-App-ECS-Task-Execution-Role"
        Tags:
          - Key: "Project"
            Value: !Ref ProjectName
  # --- End Amazon IAM Roles ---


Outputs:
  StackDeletionRds:
    Description: "Stack Deletion Clean Up"
    Value: "After deleting the stack, it is recommended that you delete the backup snapshot(s) that are automatically generated by Amazon RDS"
  
  TechChallengeUrl:
    Description: "To access the deployed solution, navigate to the following URL using a web browser"
    Value: !Sub "http://${EcsApplicationLoadBalancer.DNSName}"